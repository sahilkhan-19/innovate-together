# Output Sample
# Enter Class Intervals (comma-separated): 0-10, 10-20, 20-30, 30-40, 40-50
# Enter Frequencies (comma-separated): 42, 35, 47, 54, 31

# Which measure would you like to calculate?
# 1. Mean
# 2. Median
# 3. Mode
# 4. Geometric Mean
# 5. Harmonic Mean
# 6. Moment about mean
# 7. Moment about any arbitrary number
# 8. Moment about origin
# 9. All
# Enter your choice : 9
# Enter the order of the moment about the mean: 1
# Enter the arbitrary number: 5
# Enter the order of the moment: 1
# Enter the order of the moment about the origin: 1

# Arithmetic Mean: 24.86
# Median: 25.85
# Mode: 32.33
# Geometric Mean: 19.77
# Harmonic Mean: 14.08
# Required Moment about Mean: 0.00
# Required Moment about 5.0: 19.86
# Required Moment about Origin: 24.86

# Which measure would you like to calculate?
# 1. Mean
# 2. Median
# 3. Mode
# 4. Geometric Mean
# 5. Harmonic Mean
# 6. Moment about mean
# 7. Moment about any arbitrary number
# 8. Moment about origin
# 9. All
# Enter your choice : 10

# Invalid choice. Please try again.

# Do you want to re-enter the data? (yes/no): no
# Thank you! Exiting the program.

import pandas as pd
import numpy as np

def calculate_mean(df):
    #Class mark
    df['Midpoint']=df['Class Interval'].apply(lambda x:(int(x.split('-')[0])+int(x.split('-')[1]))/2)
    #Product of frequency and class mark
    df['FX']=df['Frequency']*df['Midpoint']
    #Mean calculation
    mean=df['FX'].sum()/df['Frequency'].sum()
    return mean

def calculate_median(df):
    #Cumulative Frequency
    df['Cumulative Frequency']=df['Frequency'].cumsum()
    N=df['Frequency'].sum()
    #Median class
    median_class_index=df['Cumulative Frequency'].searchsorted(N / 2)
    median_class=df.iloc[median_class_index]
    #Lower bound of the median class
    L=int(median_class['Class Interval'].split('-')[0])
    #Cumulative Frequency of the class preceding the median class
    F=0 if median_class_index==0 else df.iloc[median_class_index - 1]['Cumulative Frequency']
    #Frequency of the median class
    f_median=median_class['Frequency']
    #Class width
    c=int(median_class['Class Interval'].split('-')[1])-int(median_class['Class Interval'].split('-')[0])
    #Median calculation
    median=L+((N/2-F)/f_median)*c
    return median

def calculate_mode(df):
    #Modal class
    modal_class_index=df['Frequency'].idxmax()
    modal_class=df.iloc[modal_class_index]
    #Lower bound of the modal class
    L=int(modal_class['Class Interval'].split('-')[0])
    #Frequency of modal class
    f_mode=modal_class['Frequency']
    #Frequency preceding the frequency the modal class
    f_prev=0 if modal_class_index==0 else df.iloc[modal_class_index-1]['Frequency']
    #Frequency succeeding the frequency of modal class
    f_next=0 if modal_class_index==len(df)-1 else df.iloc[modal_class_index+1]['Frequency']
    #Class width
    c=int(modal_class['Class Interval'].split('-')[1])-int(modal_class['Class Interval'].split('-')[0])
    #Mode calculation
    mode=L+((f_mode-f_prev)/((f_mode-f_prev)+(f_mode-f_next)))*c
    return mode

def calculate_geometric_mean(df):
    #Class mark
    df['Midpoint']=df['Class Interval'].apply(lambda x: (int(x.split('-')[0])+int(x.split('-')[1])) / 2)
    #Summation of frequency
    total_freq=df['Frequency'].sum()
    #Geometric mean calculation
    gm=np.exp((df['Frequency'] * np.log(df['Midpoint'])).sum() / total_freq)
    return gm

def calculate_harmonic_mean(df):
    #Class mark
    df['Midpoint']=df['Class Interval'].apply(lambda x: (int(x.split('-')[0])+int(x.split('-')[1])) / 2)
    #Summation of frequency
    total_freq=df['Frequency'].sum()
    #Harmonic mean calculation
    hm=total_freq/(df['Frequency']/df['Midpoint']).sum()
    return hm

def calculate_moment_about_mean(df, order):
    mean = calculate_mean(df)
    #(x-mean of x)
    df['Deviation'] = df['Midpoint'] - mean
    df['Moment'] = df['Frequency'] * (df['Deviation'] ** order)
    #Moment about mean
    moment_about_mean = df['Moment'].sum() / df['Frequency'].sum()
    return moment_about_mean

def calculate_moment_about_arbitrary(df, number, order):
    #(x-number)
    df['Deviation'] = df['Midpoint'] - number
    df['Moment'] = df['Frequency'] * (df['Deviation'] ** order)
    #Moment about an arbitrary number
    moment_about_number = df['Moment'].sum() / df['Frequency'].sum()
    return moment_about_number

def calculate_moment_about_origin(df, order):
    df['Moment'] = df['Frequency'] * (df['Midpoint'] ** order)
    #Moment about origin
    moment_about_origin = df['Moment'].sum() / df['Frequency'].sum()
    return moment_about_origin

def calculate_statistics():
    while True:
        class_intervals=input("Enter Class Intervals (comma-separated): ").split(",")
        frequencies=list(map(int, input("Enter Frequencies (comma-separated): ").split(",")))
        if len(class_intervals)!=len(frequencies):
            print("Error: Number of class intervals and frequencies must match.")
            continue  
        data={"Class Interval": class_intervals, "Frequency": frequencies}
        df=pd.DataFrame(data)
        while True:
            print("\nWhich measure would you like to calculate?")
            print("1. Mean")
            print("2. Median")
            print("3. Mode")
            print("4. Geometric Mean")
            print("5. Harmonic Mean")
            print("6. Moment about mean")
            print("7. Moment about any arbitrary number")
            print("8. Moment about origin")
            print("9. All")
            choice=input("Enter your choice : ")
            if choice=='1':
                mean=calculate_mean(df)
                print(f"\nArithmetic Mean: {mean:.2f}")
            elif choice=='2':
                median=calculate_median(df)
                print(f"\nMedian: {median:.2f}")
            elif choice=='3':
                mode=calculate_mode(df)
                print(f"\nMode: {mode:.2f}")
            elif choice=='4':
                gm=calculate_geometric_mean(df)
                print(f"\nGeometric Mean: {gm:.2f}")
            elif choice=='5':
                hm=calculate_harmonic_mean(df)
                print(f"\nHarmonic Mean: {hm:.2f}")
            elif choice=='6':
                order = int(input("Enter the order of the moment about the mean: "))
                Moment_mean=calculate_moment_about_mean(df, order)
                print(f"\nRequired Moment about Mean: {Moment_mean:.2f}")
            elif choice=='7':
                number=float(input("Enter the arbitrary number: "))
                order=int(input("Enter the order of the moment: "))
                Moment_arbitrary=calculate_moment_about_arbitrary(df, number, order)
                print(f"\nRequired Moment about {number}: {Moment_arbitrary:.2f}")
            elif choice=='8':
                order=int(input("Enter the order of the moment about the origin: "))
                Moment_origin=calculate_moment_about_origin(df, order)
                print(f"\nRequired Moment about Origin: {Moment_origin:.2f}")
            elif choice=='9':
                mean=calculate_mean(df)
                median=calculate_median(df)
                mode=calculate_mode(df)
                gm=calculate_geometric_mean(df)
                hm=calculate_harmonic_mean(df)
                order = int(input("Enter the order of the moment about the mean: "))
                Moment_mean=calculate_moment_about_mean(df,order)
                number = float(input("Enter the arbitrary number: "))
                order = int(input("Enter the order of the moment: "))
                Moment_arbitrary=calculate_moment_about_arbitrary(df,number,order)
                order = int(input("Enter the order of the moment about the origin: "))
                Moment_origin=calculate_moment_about_origin(df, order)
                print(f"\nArithmetic Mean: {mean:.2f}")
                print(f"Median: {median:.2f}")
                print(f"Mode: {mode:.2f}")
                print(f"Geometric Mean: {gm:.2f}")
                print(f"Harmonic Mean: {hm:.2f}")
                print(f"Required Moment about Mean: {Moment_mean:.2f}")
                print(f"Required Moment about {number}: {Moment_arbitrary:.2f}")
                print(f"Required Moment about Origin: {Moment_origin:.2f}")
            else:
                print("\nInvalid choice. Please try again.")
                break
        repeat=input("\nDo you want to re-enter the data? (yes/no): ").strip().lower()
        if repeat!='yes':
            print("Thank you! Exiting the program.")
            break
calculate_statistics()
