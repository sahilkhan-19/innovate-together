import tkinter as tk
from tkinter import ttk, messagebox
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg


def calculate_mean(df):
    #Class mark
    df['Midpoint']=df['Class Interval'].apply(lambda x:(int(x.split('-')[0])+int(x.split('-')[1]))/2)
    #Product of frequency and class mark
    df['FX']=df['Frequency']*df['Midpoint']
    #Mean calculation
    mean=df['FX'].sum()/df['Frequency'].sum()
    return mean
def calculate_median(df):
    #Cumulative Frequency
    df['Cumulative Frequency']=df['Frequency'].cumsum()
    N=df['Frequency'].sum()
    #Median class
    median_class_index=df['Cumulative Frequency'].searchsorted(N / 2)
    median_class=df.iloc[median_class_index]
    #Lower bound of the median class
    L=int(median_class['Class Interval'].split('-')[0])
    #Cumulative Frequency of the class preceding the median class
    F=0 if median_class_index==0 else df.iloc[median_class_index - 1]['Cumulative Frequency']
    #Frequency of the median class
    f_median=median_class['Frequency']
    #Class width
    c=int(median_class['Class Interval'].split('-')[1])-int(median_class['Class Interval'].split('-')[0])
    #Median calculation
    median=L+((N/2-F)/f_median)*c
    return median
def calculate_percentile(df,p):
    #Cumulative Frequency
    df['Cumulative Frequency']=df['Frequency'].cumsum()
    N=df['Frequency'].sum()
    #Percentile class
    position=p*N/100
    percentile_class_index=df['Cumulative Frequency'].searchsorted(position)
    percentile_class=df.iloc[percentile_class_index]
    #Lower bound of the percentile class
    L=int(percentile_class['Class Interval'].split('-')[0])
    #Cumulative Frequency of the class preceding the percentile class
    F=0 if percentile_class_index == 0 else df.iloc[percentile_class_index-1]['Cumulative Frequency']
    #Frequency of the percentile class
    f_percentile=percentile_class['Frequency']
    #Class width
    c=int(percentile_class['Class Interval'].split('-')[1])-int(percentile_class['Class Interval'].split('-')[0])
    #Percentile calculation
    percentile=L +((position-F)/f_percentile)*c
    return percentile
def calculate_mode(df):
    #Modal class
    modal_class_index=df['Frequency'].idxmax()
    modal_class=df.iloc[modal_class_index]
    #Lower bound of the modal class
    L=int(modal_class['Class Interval'].split('-')[0])
    #Frequency of modal class
    f_mode=modal_class['Frequency']
    #Frequency preceding the frequency the modal class
    f_prev=0 if modal_class_index==0 else df.iloc[modal_class_index-1]['Frequency']
    #Frequency succeeding the frequency of modal class
    f_next=0 if modal_class_index==len(df)-1 else df.iloc[modal_class_index+1]['Frequency']
    #Class width
    c=int(modal_class['Class Interval'].split('-')[1])-int(modal_class['Class Interval'].split('-')[0])
    #Mode calculation
    mode=L+((f_mode-f_prev)/((f_mode-f_prev)+(f_mode-f_next)))*c
    return mode
def calculate_variance(df):
    mean = calculate_mean(df)
    #(x- mean of x)**2
    df['Squared Deviation']=(df['Midpoint']-mean)**2
    df['Weighted Squared Deviation']=df['Frequency']*df['Squared Deviation']
    #Variance calculation
    variance=df['Weighted Squared Deviation'].sum()/df['Frequency'].sum()
    return variance
def calculate_standard_deviation(df):
    variance=calculate_variance(df)
    #Standard deviation calculation
    std_dev=np.sqrt(variance)
    return std_dev
def calculate_geometric_mean(df):
    #Class mark
    df['Midpoint']=df['Class Interval'].apply(lambda x: (int(x.split('-')[0])+int(x.split('-')[1])) / 2)
    #Summation of frequency
    total_freq=df['Frequency'].sum()
    #Geometric mean calculation
    gm=np.exp((df['Frequency']*np.log(df['Midpoint'])).sum()/total_freq)
    return gm
def calculate_harmonic_mean(df):
    #Class mark
    df['Midpoint']=df['Class Interval'].apply(lambda x: (int(x.split('-')[0])+int(x.split('-')[1])) / 2)
    #Summation of frequency
    total_freq=df['Frequency'].sum()
    #Harmonic mean calculation
    hm=total_freq/(df['Frequency']/df['Midpoint']).sum()
    return hm
def calculate_moment_about_mean(df,order):
    mean=calculate_mean(df)
    #(x-mean of x)
    df['Deviation']=df['Midpoint']-mean
    #Product of frequency and deviation raised to the power of order/r
    df['Moment']=df['Frequency']*(df['Deviation']**order)
    #Moment about mean calculation
    moment_about_mean=df['Moment'].sum()/df['Frequency'].sum()
    return moment_about_mean
def calculate_moment_about_arbitrary(df,number,order):
    #(x-A)
    df['Deviation']=df['Midpoint']-number
    #Product of frequency and deviation raised to the power of order/r
    df['Moment']=df['Frequency']*(df['Deviation']**order)
    #Moment about an arbitrary number calculation
    moment_about_number=df['Moment'].sum()/df['Frequency'].sum()
    return moment_about_number
def calculate_moment_about_origin(df,order):
    #Product of frequency and class mark raised to the power of order/r
    df['Moment']=df['Frequency']*(df['Midpoint']**order)
    #Moment about origin calculation
    moment_about_origin=df['Moment'].sum()/df['Frequency'].sum()
    return moment_about_origin
def Karl_coeff_skewness(df):
    mean=calculate_mean(df)
    S_D=calculate_standard_deviation(df)
    mode=calculate_mode(df)
    #Karl Pearson's coefficient of Skewness
    K_C_skewness=(int)(mean-mode)/S_D
    return K_C_skewness
def Moment_coeff_skewness(df):
    mean=calculate_mean(df)
    #Third moment calculation
    df['Third Moment']=df['Frequency']*(df['Midpoint']-mean)**3
    third_moment=df['Third Moment'].sum()/df['Frequency'].sum()
    variance=calculate_variance(df)
    #Moment of coefficient of skewness calculation
    skewness=(int)(third_moment/np.sqrt((variance**3)))
    return skewness
def calculate_kurtosis(df):
    mean=calculate_mean(df)
    #Fourth moment calculation
    df['Fourth Moment']=df['Frequency']*(df['Midpoint']-mean)**4
    fourth_moment=df['Fourth Moment'].sum()/df['Frequency'].sum()
    variance=calculate_variance(df)
    #Measure of Kurtosis calculation
    kurtosis=(int)(fourth_moment/(variance**2))
    return kurtosis
def calculate_gamma1(df):
    B1=Moment_coeff_skewness(df)
    Y1=np.sqrt(abs(B1))
    return Y1
def calculate_gamma2(df):
    B2=calculate_kurtosis(df)
    Y2=B2-3
    return Y2
def calculate_correlation_coeff(df1,df2):
    mean_x=calculate_mean(df1)
    mean_y=calculate_mean(df2)
    covariance=sum((df1['Midpoint']-mean_x)*(df2['Midpoint']-mean_y))/len(df1)
    std_x=np.sqrt(abs(sum((df1['Midpoint']-mean_x)**2)))
    std_y=np.sqrt(abs(sum((df2['Midpoint']-mean_y)**2)))
    correlation_coeff=covariance/(std_x*std_y)
    return correlation_coeff
class StatisticsApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Statistical Calculator")
        self.root.geometry("1000x800")  # Increased window size for better visibility
        self.root.configure(bg="#F0F0F0")

        # Custom style for ttk widgets
        self.style = ttk.Style()
        self.style.theme_use("clam")
        self.style.configure("TFrame", background="#F0F0F0")
        self.style.configure("TLabel", background="#F0F0F0", foreground="#333333", font=("Arial", 12))
        self.style.configure("TButton", background="#0078D7", foreground="#FFFFFF", font=("Arial", 12), padding=10)
        self.style.configure("TEntry", background="#FFFFFF", foreground="#333333", font=("Arial", 12))
        self.style.configure("TCombobox", background="#E1F5FE", foreground="#333333", font=("Arial", 12))

        # Main Frame
        self.main_frame = ttk.Frame(root)
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # Input Fields for Distribution X
        ttk.Label(self.main_frame, text="Distribution X").grid(row=0, column=0, pady=10, sticky="w")
        ttk.Label(self.main_frame, text="Class Intervals (comma-separated):").grid(row=1, column=0, sticky="w")
        self.class_intervals_x = ttk.Entry(self.main_frame, width=50)
        self.class_intervals_x.grid(row=1, column=1, padx=10, pady=5)

        ttk.Label(self.main_frame, text="Frequencies (comma-separated):").grid(row=2, column=0, sticky="w")
        self.frequencies_x = ttk.Entry(self.main_frame, width=50)
        self.frequencies_x.grid(row=2, column=1, padx=10, pady=5)

        # Input Fields for Distribution Y
        ttk.Label(self.main_frame, text="Distribution Y").grid(row=3, column=0, pady=10, sticky="w")
        ttk.Label(self.main_frame, text="Class Intervals (comma-separated):").grid(row=4, column=0, sticky="w")
        self.class_intervals_y = ttk.Entry(self.main_frame, width=50)
        self.class_intervals_y.grid(row=4, column=1, padx=10, pady=5)

        ttk.Label(self.main_frame, text="Frequencies (comma-separated):").grid(row=5, column=0, sticky="w")
        self.frequencies_y = ttk.Entry(self.main_frame, width=50)
        self.frequencies_y.grid(row=5, column=1, padx=10, pady=5)

        # Distribution Selection
        ttk.Label(self.main_frame, text="Select Distribution:").grid(row=6, column=0, sticky="w")
        self.distribution_var = tk.StringVar()
        self.distribution_combobox = ttk.Combobox(self.main_frame, textvariable=self.distribution_var, values=["Distribution 1", "Distribution 2"])
        self.distribution_combobox.grid(row=6, column=1, padx=10, pady=5)
        self.distribution_combobox.current(0)

        # Calculation Options
        ttk.Label(self.main_frame, text="Select Calculation:").grid(row=7, column=0, sticky="w")
        self.calculation_var = tk.StringVar()
        self.calculation_combobox = ttk.Combobox(self.main_frame, textvariable=self.calculation_var, values=[
            "Mean", "Median", "Mode", "Percentiles", "Variance", "Standard Deviation", "Geometric Mean", "Harmonic Mean",
            "Moment about Mean", "Moment about Arbitrary Number", "Moment about Origin", "Karl Pearson's Skewness",
            "Moment Coefficient of Skewness", "Kurtosis", "Gamma 1", "Gamma 2", "Correlation Coefficient", "All"
        ])
        self.calculation_combobox.grid(row=7, column=1, padx=10, pady=5)
        self.calculation_combobox.current(0)

        # Additional Input Fields for Moment Calculations
        ttk.Label(self.main_frame, text="Order of Moment:").grid(row=8, column=0, sticky="w")
        self.order_entry = ttk.Entry(self.main_frame, width=50)
        self.order_entry.grid(row=8, column=1, padx=10, pady=5)

        ttk.Label(self.main_frame, text="Arbitrary Number for Moment:").grid(row=9, column=0, sticky="w")
        self.arbitrary_number_entry = ttk.Entry(self.main_frame, width=50)
        self.arbitrary_number_entry.grid(row=9, column=1, padx=10, pady=5)

        # Calculate Button
        self.calculate_button = ttk.Button(self.main_frame, text="Calculate", command=self.calculate)
        self.calculate_button.grid(row=10, column=0, columnspan=2, pady=20)

        # Result Display
        self.result_label = ttk.Label(self.main_frame, text="Result will be displayed here", wraplength=600)
        self.result_label.grid(row=11, column=0, columnspan=2, pady=10)

        # Graph Frame (Dedicated space for the graph)
        self.graph_frame = ttk.Frame(self.main_frame)
        self.graph_frame.grid(row=12, column=0, columnspan=2, pady=10, sticky="nsew")

        # Configure row and column weights to make the graph frame expandable
        self.main_frame.rowconfigure(12, weight=1)
        self.main_frame.columnconfigure(0, weight=1)
        self.main_frame.columnconfigure(1, weight=1)

    def calculate(self):
        try:
            # Get input data
            class_intervals_x = self.class_intervals_x.get().split(",")
            frequencies_x = list(map(int, self.frequencies_x.get().split(",")))
            class_intervals_y = self.class_intervals_y.get().split(",")
            frequencies_y = list(map(int, self.frequencies_y.get().split(",")))

            # Create DataFrames
            df_x = pd.DataFrame({"Class Interval": class_intervals_x, "Frequency": frequencies_x})
            df_y = pd.DataFrame({"Class Interval": class_intervals_y, "Frequency": frequencies_y})

            # Check if distributions have the same length
            if len(df_x) != len(df_y):
                messagebox.showerror("Error", "The two datasets must have the same length.")
                return

            # Determine selected distribution
            selected_distribution = self.distribution_var.get()
            df = df_x if selected_distribution == "Distribution 1" else df_y

            # Get order and arbitrary number if needed
            order = self.order_entry.get()
            arbitrary_number = self.arbitrary_number_entry.get()

            # Perform calculation based on selection
            calculation = self.calculation_var.get()
            result = ""
            if calculation == "Mean":
                result = f"Mean: {calculate_mean(df):.2f}"
            elif calculation == "Median":
                result = f"Median: {calculate_median(df):.2f}"
            elif calculation == "Mode":
                result = f"Mode: {calculate_mode(df):.2f}"
            elif calculation == "Percentiles":
                result = "\n".join([f"P{p}: {calculate_percentile(df, p):.2f}" for p in [10, 25, 50, 75, 90]])
            elif calculation == "Variance":
                result = f"Variance: {calculate_variance(df):.2f}"
            elif calculation == "Standard Deviation":
                result = f"Standard Deviation: {calculate_standard_deviation(df):.2f}"
            elif calculation == "Geometric Mean":
                result = f"Geometric Mean: {calculate_geometric_mean(df):.2f}"
            elif calculation == "Harmonic Mean":
                result = f"Harmonic Mean: {calculate_harmonic_mean(df):.2f}"
            elif calculation == "Moment about Mean":
                if not order:
                    messagebox.showerror("Error", "Please enter the order of the moment.")
                    return
                result = f"Moment about Mean (order {order}): {calculate_moment_about_mean(df, int(order)):.2f}"
            elif calculation == "Moment about Arbitrary Number":
                if not order or not arbitrary_number:
                    messagebox.showerror("Error", "Please enter both the order and the arbitrary number.")
                    return
                result = f"Moment about {arbitrary_number} (order {order}): {calculate_moment_about_arbitrary(df, float(arbitrary_number), int(order)):.2f}"
            elif calculation == "Moment about Origin":
                if not order:
                    messagebox.showerror("Error", "Please enter the order of the moment.")
                    return
                result = f"Moment about Origin (order {order}): {calculate_moment_about_origin(df, int(order)):.2f}"
            elif calculation == "Karl Pearson's Skewness":
                result = f"Karl Pearson's Skewness: {Karl_coeff_skewness(df):.2f}"
            elif calculation == "Moment Coefficient of Skewness":
                result = f"Moment Coefficient of Skewness: {Moment_coeff_skewness(df):.2f}"
            elif calculation == "Kurtosis":
                result = f"Kurtosis: {calculate_kurtosis(df):.2f}"
            elif calculation == "Gamma 1":
                result = f"Gamma 1: {calculate_gamma1(df):.2f}"
            elif calculation == "Gamma 2":
                result = f"Gamma 2: {calculate_gamma2(df):.2f}"
            elif calculation == "Correlation Coefficient":
                result = f"Correlation Coefficient: {calculate_correlation_coeff(df_x, df_y):.2f}"
            elif calculation == "All":
                result = self.calculate_all(df_x, df_y)

            # Display result
            self.result_label.config(text=result)

            # Plot the graph
            self.plot_graph(df_x, df_y)

        except Exception as e:
            messagebox.showerror("Error", str(e))

    def calculate_all(self, df_x, df_y):
        # Perform all calculations for the selected distribution
        df = df_x if self.distribution_var.get() == "Distribution 1" else df_y
        result = []
        result.append(f"Mean: {calculate_mean(df):.2f}")
        result.append(f"Median: {calculate_median(df):.2f}")
        result.append(f"Mode: {calculate_mode(df):.2f}")
        result.append("Percentiles:")
        for p in [10, 25, 50, 75, 90]:
            result.append(f"  P{p}: {calculate_percentile(df, p):.2f}")
        result.append(f"Variance: {calculate_variance(df):.2f}")
        result.append(f"Standard Deviation: {calculate_standard_deviation(df):.2f}")
        result.append(f"Geometric Mean: {calculate_geometric_mean(df):.2f}")
        result.append(f"Harmonic Mean: {calculate_harmonic_mean(df):.2f}")
        result.append(f"Karl Pearson's Skewness: {Karl_coeff_skewness(df):.2f}")
        result.append(f"Moment Coefficient of Skewness: {Moment_coeff_skewness(df):.2f}")
        result.append(f"Kurtosis: {calculate_kurtosis(df):.2f}")
        result.append(f"Gamma 1: {calculate_gamma1(df):.2f}")
        result.append(f"Gamma 2: {calculate_gamma2(df):.2f}")
        result.append(f"Correlation Coefficient: {calculate_correlation_coeff(df_x, df_y):.2f}")
        return "\n".join(result)

    def plot_graph(self, df_x, df_y):
        for widget in self.graph_frame.winfo_children():
            widget.destroy()
        mean_x = calculate_mean(df_x)
        median_x = calculate_median(df_x)
        mode_x = calculate_mode(df_x)

        mean_y = calculate_mean(df_y)
        median_y = calculate_median(df_y)
        mode_y = calculate_mode(df_y)

    # Generate the plot
        fig, ax = plt.subplots(figsize=(8, 5))  # Increased figure size
        x_midpoints = [(int(interval.split('-')[0]) + int(interval.split('-')[1])) / 2 for interval in df_x['Class Interval']]
        y_midpoints = [(int(interval.split('-')[0]) + int(interval.split('-')[1])) / 2 for interval in df_y['Class Interval']]
        ax.plot(x_midpoints, df_x['Frequency'], label="Distribution X", color='blue', marker='o')
        ax.plot(y_midpoints, df_y['Frequency'], label="Distribution Y", color='green', marker='o')

    # Add vertical lines for mean, median, and mode of Distribution X
        ax.axvline(mean_x, color='blue', linestyle='--', label=f'Mean X: {mean_x:.2f}')
        ax.axvline(median_x, color='blue', linestyle=':', label=f'Median X: {median_x:.2f}')
        ax.axvline(mode_x, color='blue', linestyle='-.', label=f'Mode X: {mode_x:.2f}')

    # Add vertical lines for mean, median, and mode of Distribution Y
        ax.axvline(mean_y, color='green', linestyle='--', label=f'Mean Y: {mean_y:.2f}')
        ax.axvline(median_y, color='green', linestyle=':', label=f'Median Y: {median_y:.2f}')
        ax.axvline(mode_y, color='green', linestyle='-.', label=f'Mode Y: {mode_y:.2f}')

    # Add labels for the vertical lines
        ax.text(mean_x, max(df_x['Frequency']) * 0.9, f'Mean X: {mean_x:.2f}', color='blue', rotation=90, verticalalignment='top')
        ax.text(median_x, max(df_x['Frequency']) * 0.8, f'Median X: {median_x:.2f}', color='blue', rotation=90, verticalalignment='top')
        ax.text(mode_x, max(df_x['Frequency']) * 0.7, f'Mode X: {mode_x:.2f}', color='blue', rotation=90, verticalalignment='top')

        ax.text(mean_y, max(df_y['Frequency']) * 0.9, f'Mean Y: {mean_y:.2f}', color='green', rotation=90, verticalalignment='top')
        ax.text(median_y, max(df_y['Frequency']) * 0.8, f'Median Y: {median_y:.2f}', color='green', rotation=90, verticalalignment='top')
        ax.text(mode_y, max(df_y['Frequency']) * 0.7, f'Mode Y: {mode_y:.2f}', color='green', rotation=90, verticalalignment='top')

    # Set labels and title
        ax.set_xlabel("Class Midpoints")
        ax.set_ylabel("Frequency")
        ax.set_title("Frequency Distribution for X and Y")
        ax.legend()
        ax.grid(True)

    # Embed plot in Tkinter
        canvas = FigureCanvasTkAgg(fig, master=self.graph_frame)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
# Run the application
if __name__ == "__main__":
    root = tk.Tk()
    app = StatisticsApp(root)
    root.mainloop()
